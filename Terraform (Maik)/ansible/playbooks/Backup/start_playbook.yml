
---
- name: Erstelle AWS VPC und EC2 Instanz
  hosts: localhost
  gather_facts: False
  vars:
    key_pair: Ansible-DEV-Envirement
    #random_id: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters,digits') }}" BRAUCHEN WIR NICH MEHR
    #ec2_user_password: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters,digits,[@#$]') }}"
    #ec2_user_password: "{{ lookup('password', '/dev/null length=8 chars=digits') }}"
    ec2_user_password: "A07021f"
  
  tasks:
    - name: Generiere random_id
      set_fact:
        random_id: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters,digits') }}"

    - name: Speichere random_id in einer Datei
      local_action:
        module: copy
        content: "{{ random_id }}"
        dest: "/tmp/random_id.txt"

    # # Hier generieren Sie das Passwort und speichern es in einer Datei
    # - name: Generiere Passwort und speichere in Datei
    #   local_action:
    #     module: copy
    #     content: "{{ lookup('password', '/dev/null length=4 chars=digits') }}"
    #     dest: /tmp/passwortdatei.txt

    # # Hier lesen Sie das Passwort aus der Datei und setzen es als Fakt
    # - name: Lese Passwort aus Datei
    #   local_action: 
    #     module: slurp
    #     src: /tmp/passwortdatei.txt
    #   register: ec2_user_password_from_file

    # - set_fact:
    #     ec2_user_password: "{{ ec2_user_password_from_file['content'] | b64decode }}"

    - name: Erstelle ein VPC
      amazon.aws.ec2_vpc_net:
        name: MeinVPC_{{ random_id }}
        cidr_block: 10.0.0.0/16
        region: eu-central-1
        tags:
          Name: MeinVPC_{{ random_id }}
      register: vpc

    - name: Erstelle Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: eu-central-1
        tags:
          Name: MeinIGW_{{ random_id }}
      register: internet_gateway

    - name: Erstelle ein Subnetz
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 10.0.1.0/24
        az: eu-central-1a
        region: eu-central-1
        tags:
          Name: MeinSubnetz_{{ random_id }}
        map_public: yes
      register: subnet

    - name: Erstelle Routing Tabelle
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: eu-central-1
        tags:
          Name: MeineRouteTable_{{ random_id }}
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ internet_gateway.gateway_id }}"
      register: route_table

    - name: Erstelle Security Group für EC2
      amazon.aws.ec2_group:
        name: MeinSG_{{ random_id }}
        description: Security Group fuer MeinEC2
        vpc_id: "{{ vpc.vpc.id }}"
        region: eu-central-1
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: security_group

    # Erstelle EC2 Instanz
    - name: Erstelle EC2 Instanz
      amazon.aws.ec2_instance:
        name: MeinEC2_{{ random_id }}
        instance_type: t2.micro
        image_id: ami-01342111f883d5e4e
        wait: yes
        wait_timeout: 300
        state: running
        key_name: "{{ key_pair }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_group: "{{ security_group.group_name }}"
        region: eu-central-1
        tags:
          Name: MeinEC2_{{ random_id }}
        user_data: |
          #!/bin/bash
          echo "ec2-user:{{ ec2_user_password }}" | chpasswd 2>&1 > /tmp/chpasswd.log
          sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config 2>&1 > /tmp/sed.log
          systemctl restart sshd 2>&1 > /tmp/restart_sshd.log
      register: ec2

    # # Ausgabe der Daten
    # - name: Gebe EC2 Instanz Daten aus
    #   debug:
    #     msg:
    #       - "Public IP: {{ ec2.instances[0].public_ip_address }}"
    #       - "Username: ec2-user"
    #       - "Password: {{ ec2_user_password }}"
    #       #- "Password: {{ ec2_user_password_from_file.content | b64decode }}"

    - name: Speichere EC2 Instanz Daten in einer Datei
      local_action:
        module: copy
        content: |
          Public IP: {{ ec2.instances[0].public_ip_address }}
          User ID: {{ random_id }}
          Username: ec2-user
          Password: {{ ec2_user_password }}
        dest: "/tmp/ssh_data.txt"

    # - name: Lösche temporäre Passwortdatei
    #   local_action:
    #     module: file
    #     path: /tmp/passwortdatei.txt
    #     state: absent